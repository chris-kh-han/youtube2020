{"version":3,"sources":["components/SearchBar.js","components/PlayListItem.js","App.js","index.js"],"names":["SearchBar","setSrc","useState","searchInput","setSearchInput","parseData","data","results","items","filter","item","id","kind","type","placeholder","onChange","e","target","value","onClick","input","url","process","fetch","then","response","json","fetchSearchApi","PlayListItem","src","videoStat","setVideoStat","useEffect","getVideoInfo","videoId","getVideoStat","statistics","title","width","height","frameBorder","allow","allowFullScreen","snippet","description","thumbnails","default","alt","viewCount","publishTime","App","length","map","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAsCeA,MAjCf,YAAgC,IAAXC,EAAU,EAAVA,OAAU,EACWC,mBAAS,IADpB,mBACpBC,EADoB,KACPC,EADO,KAcrBC,EAAY,SAACC,GACf,IAAMC,EAAUD,EAAKE,MAAMC,QAAO,SAAAC,GAAI,MAAqB,kBAAjBA,EAAKC,GAAGC,QAClDX,EAAOM,IASX,OACI,qCACI,uBAAOM,KAAK,OAAOC,YAAY,SAASC,SAxBpB,SAACC,GACzBZ,EAAeY,EAAEC,OAAOC,UAwBpB,wBAAQC,QATY,YAZL,SAACC,GACpB,IAAMC,EAAG,uFAAmFD,EAAnF,gBAXDE,2CAYRC,MAAMF,GACHG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAKnB,GASRsB,CAAexB,IAQX,wBCWGyB,MAtCf,YAAgC,IAARC,EAAO,EAAPA,IAAO,EACO3B,mBAAS,MADhB,mBACpB4B,EADoB,KACTC,EADS,KAK3BC,qBAAW,WACPC,MAED,IAEH,IAAMA,EAAe,WACjB,IAAMZ,EAAG,yGAAqGQ,EAAIlB,GAAGuB,QAA5G,gBAfDZ,2CAgBRC,MAAMF,GACHG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAKW,IAGNA,EAAe,SAAC7B,GAClByB,EAAazB,EAAKE,MAAM,GAAG4B,aAO/B,OACI,gCACI,wBAAQC,MAAM,MAAMC,MAAM,MAAMC,OAAO,MAAMV,IAL3C,iCAAN,OAAwCA,EAAIlB,GAAGuB,SAKwBM,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,IACnM,4BAAIb,EAAIc,QAAQN,QAChB,4BAAIR,EAAIc,QAAQC,cAChB,qBAAKf,IAAKA,EAAIc,QAAQE,WAAWC,QAAQzB,IAAK0B,IAAI,gBAClD,mCAAIjB,QAAJ,IAAIA,OAAJ,EAAIA,EAAWkB,YACf,4BAAInB,EAAIc,QAAQM,kB,MCfbC,MAjBf,WAAgB,IAAD,EACShD,mBAAS,IADlB,mBACN2B,EADM,KACD5B,EADC,KAQb,OACE,gCACE,cAAC,EAAD,CAAWA,OAAQA,MAChB4B,EAAIsB,QANFtB,EAAIuB,KAAK,SAAC1C,EAAM2C,GAAP,OAAiB,cAAC,EAAD,CAA0BxB,IAAKnB,GAAZ2C,UCLxDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4b5cbd65.chunk.js","sourcesContent":["import React, { useState } from \"react\"\n\nconst API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n\n\nfunction SearchBar({ setSrc }) {\n    const [searchInput, setSearchInput] = useState('')\n\n    const onChangeSearchInput = (e) => {\n        setSearchInput(e.target.value)\n    }\n\n    const fetchSearchApi = (input) => {\n        const url = `https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=5&q=${input}&key=${API_KEY}`\n        fetch(url)\n          .then(response => response.json())\n          .then(parseData)\n    }\n\n    const parseData = (data) => {\n        const results = data.items.filter(item => item.id.kind === \"youtube#video\");\n        setSrc(results)\n    }\n\n    const onClickSearchButton = () => {\n        fetchSearchApi(searchInput);\n    }\n\n\n\n    return (\n        <>\n            <input type=\"text\" placeholder=\"Search\" onChange={onChangeSearchInput}></input>\n            <button onClick={onClickSearchButton}>Submit</button>\n        </>\n    )\n}\n\nexport default SearchBar","import React, { useState, useEffect } from \"react\"\n\nconst API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n\n// import moment from 'moment';\n\nfunction PlayListItem({ src }) {\n    const [videoStat, setVideoStat] = useState(null)\n    // const now = moment().format(\"MM-DD-YYYY\");\n    // const publishedAt = moment(src.snippet.publishTime)\n\n    useEffect( () => {\n        getVideoInfo() \n        // eslint-disable-next-line\n    }, [])\n\n    const getVideoInfo = () => {\n        const url = `https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=${src.id.videoId}&key=${API_KEY}`\n        fetch(url)\n          .then(response => response.json())\n          .then(getVideoStat)\n    }\n\n    const getVideoStat = (data) => {\n        setVideoStat(data.items[0].statistics)\n    }\n\n    const getYoutubeSrc = () => {\n        return `https://www.youtube.com/embed/${src.id.videoId}`\n    }\n\n    return (\n        <div>\n            <iframe title=\"sex\" width=\"300\" height=\"166\" src={getYoutubeSrc()} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n            <p>{src.snippet.title}</p>\n            <p>{src.snippet.description}</p>\n            <img src={src.snippet.thumbnails.default.url} alt=\"faker-akali\" />\n            <p>{videoStat?.viewCount}</p>\n            <p>{src.snippet.publishTime}</p>\n        </div>\n    )\n   \n}\n\nexport default PlayListItem","import React, { useState } from \"react\";\nimport SearchBar from './components/SearchBar'\nimport PlayListItem from './components/PlayListItem'\n\nimport './App.css';\n\nfunction App() {\n  const [src, setSrc] = useState([])\n  \n\n  const renderPlayList = () => {\n    return src.map( (item, index) => <PlayListItem key={index} src={item} />)\n  }\n\n  return (\n    <div>\n      <SearchBar setSrc={setSrc} />\n      {!!src.length && renderPlayList()}\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}